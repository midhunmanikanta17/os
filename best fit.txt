#include <stdio.h>

int main() {
    int partitions[10], processes[10];
    int m, n, allocation[10];

    // Get the number of partitions and processes
    printf("Enter the number of partitions: ");
    scanf("%d", &m);
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    // Get partition sizes
    printf("Enter partition sizes: \n");
    for (int i = 0; i < m; i++) {
        printf("Partition %d size: ", i + 1);
        scanf("%d", &partitions[i]);
    }

    // Get process sizes
    printf("Enter process sizes: \n");
    for (int i = 0; i < n; i++) {
        printf("Process %d size: ", i + 1);
        scanf("%d", &processes[i]);
    }

    // Initialize allocation array to -1 (no process allocated)
    for (int i = 0; i < n; i++) {
        allocation[i] = -1;
    }

    // Best Fit allocation
    for (int i = 0; i < n; i++) {
        int best_index = -1;
        int min_diff = 999999;

        // Find the partition with the least leftover space that can fit the process
        for (int j = 0; j < m; j++) {
            if (partitions[j] >= processes[i] && (partitions[j] - processes[i] < min_diff)) {
                min_diff = partitions[j] - processes[i];
                best_index = j;
            }
        }

        // If a valid partition is found
        if (best_index != -1) {
            allocation[i] = best_index;
            partitions[best_index] -= processes[i];  // Reduce partition size
        }
    }

    // Output the allocation
    printf("\nProcess No.  Process Size  Partition No.\n");
    for (int i = 0; i < n; i++) {
        if (allocation[i] != -1)
            printf("P%d          %d             P%d\n", i + 1, processes[i], allocation[i] + 1);
        else
            printf("P%d          %d             Not Allocated\n", i + 1, processes[i]);
    }

    return 0;
}
