#include <stdio.h>
#include <pthread.h>
#include <unistd.h>

#define N 5

pthread_mutex_t forks[N];

void* philosopher(void* num) {
    int id = *(int*)num;

    int left = id;
    int right = (id + 1) % N;

    while (1) {
        printf("Philosopher %d is thinking...\n", id);
        sleep(1); // Thinking

        // Pick up left fork
        pthread_mutex_lock(&forks[left]);
        printf("Philosopher %d picked up left fork %d\n", id, left);

        // Pick up right fork
        pthread_mutex_lock(&forks[right]);
        printf("Philosopher %d picked up right fork %d\n", id, right);

        // Eat
        printf("Philosopher %d is eating...\n", id);
        sleep(2);

        // Put down forks
        pthread_mutex_unlock(&forks[right]);
        pthread_mutex_unlock(&forks[left]);
        printf("Philosopher %d put down forks and starts thinking again.\n", id);
    }

    return NULL;
}

int main() {
    pthread_t philosophers[N];
    int ids[N];

    // Initialize forks (mutexes)
    for (int i = 0; i < N; i++)
        pthread_mutex_init(&forks[i], NULL);

    // Create philosopher threads
    for (int i = 0; i < N; i++) {
        ids[i] = i;
        pthread_create(&philosophers[i], NULL, philosopher, &ids[i]);
    }

    // Wait for threads (optional, not necessary here)
    for (int i = 0; i < N; i++)
        pthread_join(philosophers[i], NULL);

    return 0;
}
