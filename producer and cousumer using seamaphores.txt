#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>  // For sleep function

#define MAX_BUFFER_SIZE 5

// Shared buffer
int buffer[MAX_BUFFER_SIZE];
int in = 0;  // Points to the next available slot for the producer
int out = 0; // Points to the next item for the consumer

// Semaphores
sem_t empty;  // Number of empty slots in the buffer
sem_t full;   // Number of filled slots in the buffer
sem_t mutex;  // For mutual exclusion

// Producer function
void* producer(void* param) {
    int item;
    while (1) {
        item = rand() % 100;  // Random item to produce
        sem_wait(&empty);      // Wait if there's no empty slot
        sem_wait(&mutex);      // Enter critical section

        // Produce item and add to the buffer
        buffer[in] = item;
        printf("Produced: %d\n", item);
        in = (in + 1) % MAX_BUFFER_SIZE;

        sem_post(&mutex);      // Exit critical section
        sem_post(&full);       // Signal that there's a new item in the buffer

        sleep(1);  // Simulate time to produce an item
    }
    return NULL;
}

// Consumer function
void* consumer(void* param) {
    int item;
    while (1) {
        sem_wait(&full);       // Wait if there's nothing to consume
        sem_wait(&mutex);      // Enter critical section

        // Consume item from buffer
        item = buffer[out];
        printf("Consumed: %d\n", item);
        out = (out + 1) % MAX_BUFFER_SIZE;

        sem_post(&mutex);      // Exit critical section
        sem_post(&empty);      // Signal that there's an empty slot available

        sleep(1);  // Simulate time to consume an item
    }
    return NULL;
}

int main() {
    pthread_t prod, cons;

    // Initialize semaphores
    sem_init(&empty, 0, MAX_BUFFER_SIZE);  // Initially, buffer is empty
    sem_init(&full, 0, 0);                 // No items in the buffer at the start
    sem_init(&mutex, 0, 1);                // Mutex initialized to 1 (unlocked)

    // Create producer and consumer threads
    pthread_create(&prod, NULL, producer, NULL);
    pthread_create(&cons, NULL, consumer, NULL);

    // Join threads (in this case, the program runs forever)
    pthread_join(prod, NULL);
    pthread_join(cons, NULL);

    // Destroy semaphores (optional)
    sem_destroy(&empty);
    sem_destroy(&full);
    sem_destroy(&mutex);

    return 0;
}
