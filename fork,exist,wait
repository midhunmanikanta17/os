#include <stdio.h>
#include <unistd.h>     // For fork(), getpid()
#include <stdlib.h>     // For exit()
#include <sys/wait.h>   // For wait()

int main() {
    pid_t pid;
    int status;

    pid = fork();  // Create a new process

    if (pid < 0) {
        // Fork failed
        printf("Fork failed.\n");
        return 1;
    } else if (pid == 0) {
        // Child process
        printf("Child Process: PID = %d\n", getpid());
        printf("Child is running...\n");
        sleep(2);  // Simulate work
        printf("Child exiting with status 10.\n");
        exit(10);  // Exit with status 10
    } else {
        // Parent process
        printf("Parent Process: PID = %d, waiting for child...\n", getpid());
        wait(&status);  // Wait for child to finish
        printf("Parent: Child exited with status %d\n", WEXITSTATUS(status));
    }

    return 0;
}
